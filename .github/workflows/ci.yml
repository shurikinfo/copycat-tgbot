name: ci_copycat-tgbot
on:
  push:
    branches: [ "**" ]  # Запуск для всех веток
  pull_request:
    branches: [ "main" ]  # Для PR в main
  workflow_dispatch:

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
      
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==1.7.1
          python -m venv /opt/venv && \
          . /opt/venv/bin/activate && \
          pip install wheel && \
          poetry install

      - name: Linters
        run: |
          . /opt/venv/bin/activate
          autoflake --check .
          isort --check .
          black --check .

      # - name: Test with pytest
      #   run: |
      #     make cover

  # Этапы, выполняемые ТОЛЬКО для main после мержа
  master_checks:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: lint_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0  # Получаем всю историю тегов

      - name: Calculate new tag
        id: tag
        run: |
          # Получаем текущие дату и теги
          YEAR=$(date +'%y')  # 24 для 2024
          MONTH=$(date +'%m') # 05 для мая
          EXISTING_TAGS=$(git tag -l "$YEAR.$MONTH.*" | sort -V)

          # Определяем порядковый номер (N)
          if [ -z "$EXISTING_TAGS" ]; then
            N=1
          else
            LAST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
            LAST_N=${LAST_TAG##*.}
            N=$((LAST_N + 1))
          fi

          NEW_TAG="$YEAR.$MONTH.$N"
          echo "New tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "${{ steps.tag.outputs.tag }}" -m "Release ${{ steps.tag.outputs.tag }}"
          git push origin "${{ steps.tag.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_ACTION_TOKEN }}
